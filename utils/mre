#!/usr/bin/perl
#

=head1 NAME

 mre

=head1 SYNOPSIS

 mre [-x] /path/to/dir

=head1 DESCRIPTION

 List the Most REcent file(s) in a directory

 With no other arguments lists the most recent file in the pwd

 With a dir as an argument lists the most recent file in dir

 This utility was born out of desperation from doing ls with -rt options 
 in directories with hundreds of thousands of files in order to find which
 one had been most recently edited.  ls takes way too long to process big 
 directories.  mre is quick.

 Favourite useage
    tail `mre /path/to/dir`

 We try and do the expected thing so if you hand us a list of files we'll 
 tell you which is the most recent.  If you hand us a shell glob (remember 
 to quote it on the command line) then we'll glob it.

 We don't recurse subdirectories.

=head1 OPTIONS

 -x
    where "x" is a number: list the most recent x files
 --help
    Print this message.
 --man
    Print the man page.
 --version|-V
    Print the program version number.

=head1 To Do

 Things that I could implement if needed-
    Add recurse subdirectories/no recurse subdirectories
      - File::Find is the best option here.  But mre was written to be quick
        in big subdirectories not a general purpose find, not sure if this is
        a good idea or not; and I don't have a huge directory to test on at the
         moment.
    Add a --noglob option to turn off globbing?
    Add an option to include/not include symlinks?

=head1 BUGS

None that I know of :-)

=head1 AUTHOR

 Murray Barton
 email: murray.barton at gmail.com
 http://incommunique.blogspot.com

=head1 COPYRIGHT

 Copyright (c) 2003. Murray Barton. All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the same terms as Perl itself.

 See http://www.perl.com/perl/misc/Artistic.html

=head1 DISCLAIMER

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty
 of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut

$VERSION = "0.3";

use strict;
use warnings;
use Getopt::Long qw(:config pass_through);
use Pod::Usage;
use File::Basename;

my $verbose = 0;

GetOptions(
    'usage'      => sub { pod2usage(-verbose => 0, -exitval => 0) }, 
    'help|?'     => sub { pod2usage(-verbose => 1, -exitval => 0) }, 
    'man'        => sub { pod2usage(-verbose => 2, -exitval => 0) }, 
    'version|V'  => sub { print basename($0), " v$main::VERSION\n";  exit 0}, 
);

my $list_mode = 0;

if ( defined $ARGV[0] and $ARGV[0] =~ m|^-{1,2}(\d+)$| ){
    # ahh they want us to list the "x" most recent, sweet
    $list_mode = $1;
    shift @ARGV;
}
# any other command line arguments given will be treated as file/directory names

my $latest;
my %files;

my @list;
if ( $#ARGV < 0 ){
    # no command line arguments
    push @list, ".";
}
else {
    @list = @ARGV;
}

$latest->{tstamp}   = 0;
$latest->{filename} = "No files found";


for my $thing ( @list ){
    if ( -d $thing ){
        # it's a directory, slurp it
        ( my $dir = $thing ) =~ s|/$||;    # remove trailing slashes
        opendir(my $dh , $dir) || die "Could not opendir $dir: $!";
        for my $file ( map { "$dir/$_" } readdir $dh ){
            process_file($file);
        }
        closedir $dh;
    }
    else {
        if ( $thing =~ /\?|\*/ ){
            # it's a shell glob, glob it
            # we could use perls glob() but I tested on a directory
            # with 200002 files and this seemed quicker
            my $dir = dirname($thing);
            my $pat = glob2pat(basename($thing));
            opendir(my $dh , $dir) || die "Could not opendir $dir: $!";
            for my $file ( readdir $dh ){
                next unless $file =~ /$pat/;
                process_file($file);
            }
            closedir $dh;
        }
        else {
            process_file($thing);
        }
    }
}

if ( $list_mode > 0 ){
    my $cnt = 0;
    my $start = ( 1 + scalar keys %files ) - $list_mode;

    for ( sort { $files{$a} <=> $files{$b} } keys %files ){
        ++$cnt;
        next unless $cnt >= $start;
        print "$_\n";
    }
}
else {
    print $latest->{filename}, "\n";
}

sub process_file {
    my $file = shift or die "Filename parameter not passed\n";
    for ( $file ){
        lstat $_;
        next unless -f _;
        next if -l _;
        my $tstamp = (stat)[9] || 0;
        if ( $list_mode > 0 ){
            $files{$_} = $tstamp;
        }
        elsif ($tstamp > $latest->{tstamp}){
            $latest->{filename} = $_;
            $latest->{tstamp}   = $tstamp;
        }
    }
}

sub glob2pat {

# Thanks for Recipe 6.9. Matching Shell Globs as Regular Expressions
# of the Perl Cookbook

    my $globstr = shift;
    my %patmap = (
        '*' => '.*',
        '?' => '.',
        '[' => '[',
        ']' => ']',
    );
    $globstr =~ s{(.)} { $patmap{$1} || "\Q$1" }ge;
    return $globstr;
}

